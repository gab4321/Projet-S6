
Blinky_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000284  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000191  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f7  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e1  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000094  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000010a  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000074  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	a9 c0       	rjmp	.+338    	; 0x158 <__bad_interrupt>
   6:	00 00       	nop
   8:	a7 c0       	rjmp	.+334    	; 0x158 <__bad_interrupt>
   a:	00 00       	nop
   c:	a5 c0       	rjmp	.+330    	; 0x158 <__bad_interrupt>
   e:	00 00       	nop
  10:	a3 c0       	rjmp	.+326    	; 0x158 <__bad_interrupt>
  12:	00 00       	nop
  14:	a1 c0       	rjmp	.+322    	; 0x158 <__bad_interrupt>
  16:	00 00       	nop
  18:	9f c0       	rjmp	.+318    	; 0x158 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9d c0       	rjmp	.+314    	; 0x158 <__bad_interrupt>
  1e:	00 00       	nop
  20:	9b c0       	rjmp	.+310    	; 0x158 <__bad_interrupt>
  22:	00 00       	nop
  24:	99 c0       	rjmp	.+306    	; 0x158 <__bad_interrupt>
  26:	00 00       	nop
  28:	97 c0       	rjmp	.+302    	; 0x158 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	95 c0       	rjmp	.+298    	; 0x158 <__bad_interrupt>
  2e:	00 00       	nop
  30:	93 c0       	rjmp	.+294    	; 0x158 <__bad_interrupt>
  32:	00 00       	nop
  34:	91 c0       	rjmp	.+290    	; 0x158 <__bad_interrupt>
  36:	00 00       	nop
  38:	8f c0       	rjmp	.+286    	; 0x158 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8d c0       	rjmp	.+282    	; 0x158 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c0       	rjmp	.+278    	; 0x158 <__bad_interrupt>
  42:	00 00       	nop
  44:	8a c0       	rjmp	.+276    	; 0x15a <__vector_17>
  46:	00 00       	nop
  48:	87 c0       	rjmp	.+270    	; 0x158 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	85 c0       	rjmp	.+266    	; 0x158 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__bad_interrupt>
  52:	00 00       	nop
  54:	81 c0       	rjmp	.+258    	; 0x158 <__bad_interrupt>
  56:	00 00       	nop
  58:	7f c0       	rjmp	.+254    	; 0x158 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7d c0       	rjmp	.+250    	; 0x158 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7b c0       	rjmp	.+246    	; 0x158 <__bad_interrupt>
  62:	00 00       	nop
  64:	79 c0       	rjmp	.+242    	; 0x158 <__bad_interrupt>
  66:	00 00       	nop
  68:	77 c0       	rjmp	.+238    	; 0x158 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	75 c0       	rjmp	.+234    	; 0x158 <__bad_interrupt>
  6e:	00 00       	nop
  70:	73 c0       	rjmp	.+230    	; 0x158 <__bad_interrupt>
  72:	00 00       	nop
  74:	71 c0       	rjmp	.+226    	; 0x158 <__bad_interrupt>
  76:	00 00       	nop
  78:	6f c0       	rjmp	.+222    	; 0x158 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6d c0       	rjmp	.+218    	; 0x158 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6b c0       	rjmp	.+214    	; 0x158 <__bad_interrupt>
  82:	00 00       	nop
  84:	69 c0       	rjmp	.+210    	; 0x158 <__bad_interrupt>
  86:	00 00       	nop
  88:	67 c0       	rjmp	.+206    	; 0x158 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	65 c0       	rjmp	.+202    	; 0x158 <__bad_interrupt>
  8e:	00 00       	nop
  90:	63 c0       	rjmp	.+198    	; 0x158 <__bad_interrupt>
  92:	00 00       	nop
  94:	61 c0       	rjmp	.+194    	; 0x158 <__bad_interrupt>
  96:	00 00       	nop
  98:	5f c0       	rjmp	.+190    	; 0x158 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	5d c0       	rjmp	.+186    	; 0x158 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	5b c0       	rjmp	.+182    	; 0x158 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	59 c0       	rjmp	.+178    	; 0x158 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	57 c0       	rjmp	.+174    	; 0x158 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	55 c0       	rjmp	.+170    	; 0x158 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	53 c0       	rjmp	.+166    	; 0x158 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	51 c0       	rjmp	.+162    	; 0x158 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4f c0       	rjmp	.+158    	; 0x158 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	4d c0       	rjmp	.+154    	; 0x158 <__bad_interrupt>
  be:	00 00       	nop
  c0:	4b c0       	rjmp	.+150    	; 0x158 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	49 c0       	rjmp	.+146    	; 0x158 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	47 c0       	rjmp	.+142    	; 0x158 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	45 c0       	rjmp	.+138    	; 0x158 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	43 c0       	rjmp	.+134    	; 0x158 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	41 c0       	rjmp	.+130    	; 0x158 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3f c0       	rjmp	.+126    	; 0x158 <__bad_interrupt>
  da:	00 00       	nop
  dc:	3d c0       	rjmp	.+122    	; 0x158 <__bad_interrupt>
  de:	00 00       	nop
  e0:	3b c0       	rjmp	.+118    	; 0x158 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	39 c0       	rjmp	.+114    	; 0x158 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	37 c0       	rjmp	.+110    	; 0x158 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	35 c0       	rjmp	.+106    	; 0x158 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	33 c0       	rjmp	.+102    	; 0x158 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	31 c0       	rjmp	.+98     	; 0x158 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	2f c0       	rjmp	.+94     	; 0x158 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	2d c0       	rjmp	.+90     	; 0x158 <__bad_interrupt>
  fe:	00 00       	nop
 100:	2b c0       	rjmp	.+86     	; 0x158 <__bad_interrupt>
 102:	00 00       	nop
 104:	29 c0       	rjmp	.+82     	; 0x158 <__bad_interrupt>
 106:	00 00       	nop
 108:	27 c0       	rjmp	.+78     	; 0x158 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	25 c0       	rjmp	.+74     	; 0x158 <__bad_interrupt>
 10e:	00 00       	nop
 110:	23 c0       	rjmp	.+70     	; 0x158 <__bad_interrupt>
 112:	00 00       	nop
 114:	21 c0       	rjmp	.+66     	; 0x158 <__bad_interrupt>
 116:	00 00       	nop
 118:	1f c0       	rjmp	.+62     	; 0x158 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	1d c0       	rjmp	.+58     	; 0x158 <__bad_interrupt>
 11e:	00 00       	nop
 120:	1b c0       	rjmp	.+54     	; 0x158 <__bad_interrupt>
 122:	00 00       	nop
 124:	19 c0       	rjmp	.+50     	; 0x158 <__bad_interrupt>
 126:	00 00       	nop
 128:	17 c0       	rjmp	.+46     	; 0x158 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	15 c0       	rjmp	.+42     	; 0x158 <__bad_interrupt>
 12e:	00 00       	nop
 130:	13 c0       	rjmp	.+38     	; 0x158 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_clear_bss>:
 144:	22 e0       	ldi	r18, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
 14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
 14e:	a1 30       	cpi	r26, 0x01	; 1
 150:	b2 07       	cpc	r27, r18
 152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
 154:	3f d0       	rcall	.+126    	; 0x1d4 <main>
 156:	4a c0       	rjmp	.+148    	; 0x1ec <_exit>

00000158 <__bad_interrupt>:
 158:	53 cf       	rjmp	.-346    	; 0x0 <__vectors>

0000015a <__vector_17>:
void Delay(uint16_t us);
void wdt_disable(void);

volatile uint8_t CTC_flag;

ISR(TIMER1_COMPA_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	CTC_flag = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 00 02 	sts	0x0200, r24
}
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <Timer_Init>:
	PORTB |= 0x10; //Turn off LED
}

void Timer_Init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
 178:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
 17c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x09; //CTC mode; Timer_Rate = System_CLK = 1MHz
 180:	89 e0       	ldi	r24, 0x09	; 9
 182:	80 93 81 00 	sts	0x0081, r24
 186:	08 95       	ret

00000188 <LED_Toggle>:
	               // 1 tick = 1 us
}

void LED_Toggle(void) {
	PORTB ^= 0x10; //Toggle PB4
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	89 27       	eor	r24, r25
 18e:	85 b9       	out	0x05, r24	; 5
 190:	08 95       	ret

00000192 <Delay>:
}

void Delay(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
 192:	10 92 00 02 	sts	0x0200, r1
	TCNT1 = 0x0000; //Clear timer
 196:	10 92 85 00 	sts	0x0085, r1
 19a:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
 19e:	90 93 89 00 	sts	0x0089, r25
 1a2:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
 1ac:	80 91 00 02 	lds	r24, 0x0200
 1b0:	88 23       	and	r24, r24
 1b2:	e1 f3       	breq	.-8      	; 0x1ac <Delay+0x1a>
}
 1b4:	08 95       	ret

000001b6 <wdt_disable>:

void wdt_disable(void) {
	// Disable watchdog timer
	asm("wdr");
 1b6:	a8 95       	wdr
	MCUSR = 0;
 1b8:	14 be       	out	0x34, r1	; 52
	WDTCSR |= (1 << WDCE) | (1 << WDE);
 1ba:	e0 e6       	ldi	r30, 0x60	; 96
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 61       	ori	r24, 0x18	; 24
 1c2:	80 83       	st	Z, r24
	WDTCSR = 0x00;
 1c4:	10 82       	st	Z, r1
 1c6:	08 95       	ret

000001c8 <Board_Init>:
    }
}

void Board_Init(void) {
	
	cli();
 1c8:	f8 94       	cli
	wdt_disable();
 1ca:	f5 df       	rcall	.-22     	; 0x1b6 <wdt_disable>
	
	DDRB = 0x10; //PB4 output
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x10; //Turn off LED
 1d0:	2c 9a       	sbi	0x05, 4	; 5
 1d2:	08 95       	ret

000001d4 <main>:

int main(void)
{
	uint8_t i;
	
	Board_Init();
 1d4:	f9 df       	rcall	.-14     	; 0x1c8 <Board_Init>
	Timer_Init();
 1d6:	d0 df       	rcall	.-96     	; 0x178 <Timer_Init>
	
	sei(); // Enable global interrupts
 1d8:	78 94       	sei
	
    while(1)
    {
        LED_Toggle();
 1da:	da e0       	ldi	r29, 0x0A	; 10
 1dc:	d5 df       	rcall	.-86     	; 0x188 <LED_Toggle>
 1de:	cd 2f       	mov	r28, r29
		
		// Wait 0.5 seconds
		for(i=0; i<10; i++){
			Delay(50000); //us
 1e0:	80 e5       	ldi	r24, 0x50	; 80
 1e2:	93 ec       	ldi	r25, 0xC3	; 195
 1e4:	d6 df       	rcall	.-84     	; 0x192 <Delay>
 1e6:	c1 50       	subi	r28, 0x01	; 1
    while(1)
    {
        LED_Toggle();
		
		// Wait 0.5 seconds
		for(i=0; i<10; i++){
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <main+0xc>
 1ea:	f8 cf       	rjmp	.-16     	; 0x1dc <main+0x8>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
